SQL> --#>
SQL> 
SQL> --/<
SQL> CREATE OR REPLACE PACKAGE BODY joblog
  2  is
  3  
  4  	 function job_log_insert (
  5  	     p_process_name in varchar,
  6  	     p_classname    in varchar,
  7  	     p_module_name  in varchar,
  8  	     p_status_msg   in varchar,
  9  	     p_thread_name  in varchar,
 10  	     p_trace_level  in pls_integer default logger.G_INFO
 11  	 )  return varchar is
 12  	     pragma autonomous_transaction ;
 13  	     my_job_log_id number :=  job_log_id_seq.nextval;
 14  	     my_job_token varchar(32) := logger.get_job_token;
 15  	---  my_schem  varchar(64) :=  sys_context('userenv','current_schema')
 16  	 begin
 17  	     insert into job_log (
 18  	       job_log_id,    job_token,
 19  	       process_name,   thread_name,
 20  	       status_msg,   start_ts,	    module_name,
 21  	       classname
 22  	     ) values (
 23  	       my_job_log_id,  my_job_token,
 24  	       p_process_name,	p_thread_name,
 25  	       p_status_msg,  systimestamp,    p_module_name,
 26  	       p_classname
 27  	     );
 28  	     commit;
 29  	     return my_job_token;
 30  	end job_log_insert;
 31  
 32  	function job_step_insert (
 33  	     p_job_token   in varchar,
 34  	     p_step_name   in varchar,
 35  	     p_step_info   in varchar,
 36  	     p_classname   in varchar,
 37  	     p_start_ts    in timestamp,
 38  	     p_stacktrace  in varchar
 39  	) return number
 40  	is
 41  	     pragma autonomous_transaction ;
 42  		     my_job_step_id number;
 43  		     job_log_rec job_log%rowtype;
 44  
 45  	begin
 46  	    select *
 47  	    into   job_log_rec
 48  	    from   job_log
 49  	    where  job_token = p_job_token;
 50  
 51  	   insert into job_step (
 52  	     job_step_id,   job_log_id, step_name, step_info,
 53  	     classname,     start_ts,	stacktrace
 54  	   ) values (
 55  	     job_step_id_seq.nextval, job_log_rec.job_log_id, p_step_name, p_step_info,
 56  	     p_classname,   p_start_ts,   p_stacktrace
 57  	   ) returning job_step_id into my_job_step_id;
 58  	   commit;
 59  	   return my_job_step_id;
 60  	end job_step_insert;
 61  
 62  	 procedure finish_step(stepid in number) is
 63  	     pragma autonomous_transaction ;
 64  	 begin
 65  	    update job_step
 66  	    set end_ts = systimestamp
 67  	    where job_step_id = stepid;
 68  	    commit;
 69  	 end finish_step;
 70  
 71  
 72  	procedure end_job(p_job_token in varchar)
 73  	--::* update job_log.status_id to 'C' and status_msg to 'DONE'
 74  	--::>
 75  	is
 76  	    PRAGMA AUTONOMOUS_TRANSACTION;
 77  	begin
 78  	    update job_log
 79  	    set
 80  		   status_msg = 'DONE'
 81  	    where job_token = p_job_token;
 82  
 83  	   commit;
 84  	--   logger.set_action('end_job complete');
 85  	end end_job;
 86  
 87  	--::<
 88  	procedure abort_job(p_job_token in varchar,
 89  	     p_stacktrace in varchar)
 90  	--::* status_id = 'I'
 91  	--::* status_msg = 'ABORT'
 92  	--::>
 93  	is
 94  	   PRAGMA AUTONOMOUS_TRANSACTION;
 95  	begin
 96  	   update job_log
 97  	   set
 98  	       status_msg = 'ABORT',
 99  	       abort_stacktrace = p_stacktrace
100  	    where job_token = p_job_token;
101  
102  	   COMMIT;
103  	   logger.set_action('abort_job complete');
104  	end abort_job;
105  
106  -- cancer 3
107  end joblog;
108  --/>
109  
110  --#<
111  /

Package body created.

SQL> show errors
No errors.
SQL> --#>
SQL> exit
