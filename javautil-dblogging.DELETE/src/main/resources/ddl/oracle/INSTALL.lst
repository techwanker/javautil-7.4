SQL> @ dblogger_uninstall.sr.sql
SQL> /* logger objects */
SQL> drop sequence cursor_info_id_seq;
drop sequence cursor_info_id_seq
              *
ERROR at line 1:
ORA-02289: sequence does not exist 


SQL> drop sequence cursor_info_run_id_seq;
drop sequence cursor_info_run_id_seq
              *
ERROR at line 1:
ORA-02289: sequence does not exist 


SQL> drop sequence job_log_id_seq;

Sequence dropped.

SQL> drop sequence job_msg_id_seq;

Sequence dropped.

SQL> drop sequence job_step_id_seq;

Sequence dropped.

SQL> drop table cursor_explain_plan cascade constraint;
drop table cursor_explain_plan cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table cursor_info cascade constraint;
drop table cursor_info cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table cursor_info_run cascade constraint;
drop table cursor_info_run cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table cursor_sql_text cascade constraint;
drop table cursor_sql_text cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table cursor_stat cascade constraint;
drop table cursor_stat cascade constraint
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop view cursor_info_vw;
drop view cursor_info_vw
*
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> drop table job_log cascade constraint;

Table dropped.

SQL> drop table job_msg cascade constraint;

Table dropped.

SQL> drop table job_step cascade constraint;

Table dropped.

SQL> drop view job_log_vw;

View dropped.

SQL> drop view job_step_vw;

View dropped.

SQL> /* application object */
SQL> drop package logger;

Package dropped.

SQL> drop package pllogger;
drop package pllogger
*
ERROR at line 1:
ORA-04043: object PLLOGGER does not exist 


SQL> drop package pllog;
drop package pllog
*
ERROR at line 1:
ORA-04043: object PLLOG does not exist 


SQL> @ job_tables.sr.sql
SQL> create sequence job_log_id_seq;

Sequence created.

SQL> 
SQL> create table job_log (
  2  	 job_log_id number(9),
  3  	 job_token	      varchar(64),
  4  	 schema_name	      varchar(30),
  5  	 process_name	      varchar(128),
  6  	 thread_name	      varchar(128),
  7  	 status_msg	      varchar(256),
  8  	 status_ts	      timestamp(9),
  9  	 start_ts	      timestamp(9),
 10  	 end_ts 	      timestamp(9),
 11  	 log_level	      number(1),
 12  	 elapsed_millis       number(9),
 13  	 sid		      number,
 14  	 serial_nbr	      number,
 15  	 ignore_flg	      varchar(1) default 'N' not null,
 16  	 module_name	      varchar(64),
 17  	 classname	      varchar(255),
 18  	 tracefile_name       varchar(4000),
 19  	 msg_lvl	      number(1),
 20  	 trace_level	      number(2),
 21  	 directory_name       varchar(128),
 22  	 logfile_name	      varchar(64),
 23  	 tracefile_data       clob,
 24  	 tracefile_json       clob,
 25  	 abort_stacktrace     clob,
 26  	 check ( ignore_flg in ('Y', 'N')) ,
 27  	 constraint job_log_pk primary key (job_log_id)
 28  	);

Table created.

SQL> 
SQL> create sequence job_step_id_seq;

Sequence created.

SQL> 
SQL> alter table job_log add constraint job_log_token_uq unique (job_token);

Table altered.

SQL> 
SQL> create table job_step (
  2  	 job_step_id		 number(9),
  3  	 job_log_id		 number(9),
  4  	 step_name		 varchar(64),
  5  	 classname		 varchar(256),
  6  	 step_info		 varchar(2000),
  7  	 start_ts		 timestamp(9),
  8  	 end_ts 		 timestamp(9),
  9  	 dbstats		 clob,
 10  	 step_info_json 	 clob,
 11  	 --cursor_info_run_id	   number(9) references cursor_info_run,
 12  	 stacktrace		 varchar(4000),
 13  	 constraint job_step_pk primary key (job_step_id),
 14  	 constraint step_status_fk
 15  	     foreign key (job_log_id) references job_log
 16  );

Table created.

SQL> 
SQL> create sequence job_msg_id_seq;

Sequence created.

SQL> 
SQL> create table job_msg (
  2  	 job_msg_id	   number(9) not null,
  3  	 job_log_id	   number(9) not null,
  4  	 job_step_id	   number(9),
  5  	 log_msg_id	       varchar2(8) not null,
  6  	 log_msg	       varchar2(256),
  7  	 log_msg_clob	   clob,
  8  	 log_msg_ts	       timestamp (9),
  9  	 elapsed_time_milliseconds number(9),
 10  	 log_seq_nbr	       number(18,0) not null,
 11  	 caller_name	   varchar2(100),
 12  	 line_nbr	       number(5,0),
 13  	 call_stack	       clob,
 14  	 log_level	       number(2,0),
 15  	 constraint job_msg_pk primary key (job_log_id, log_seq_nbr)
 16  );

Table created.

SQL> 
SQL> 
SQL> alter table job_msg
  2  add constraint job_msg_job_log_fk
  3  foreign key (job_log_id)
  4  references job_log(job_log_id);

Table altered.

SQL> 
SQL> alter table job_msg
  2  add constraint job_fk
  3  foreign key (job_step_id)
  4  references job_step(job_step_id);

Table altered.

SQL> 
SQL> create or replace view job_step_vw as
  2  select
  3  	 job_step_id,
  4  	 job_log_id,
  5  	     step_name,
  6  	     classname ,
  7  	     step_info,
  8  	 start_ts,
  9  	 end_ts ,
 10  	 end_ts - start_ts elapsed_millis
 11  from job_step;

View created.

SQL> 
SQL> create or replace view job_log_vw as
  2  select
  3  	job_log_id,
  4  	schema_name,
  5  	process_name,
  6  	thread_name,
  7  	status_msg,
  8  	status_ts,
  9  	end_ts,
 10  	sid,
 11  	serial_nbr,
 12  	ignore_flg,
 13  	module_name,
 14  	classname,
 15  	tracefile_name,
 16  	end_ts - status_ts elapsed_millis
 17  from job_log;

View created.

SQL> 
SQL> @ logger.pks.sr.sql
SQL> set echo on
SQL> create or replace PACKAGE logger AS
  2  	 G_SEVERE	CONSTANT PLS_INTEGER := 1 ;
  3  	 G_WARNING	CONSTANT PLS_INTEGER := 2 ;
  4  	 G_INFO 	CONSTANT PLS_INTEGER := 4 ;
  5  	 G_SNAP 	CONSTANT PLS_INTEGER := 5 ;
  6  	 G_ENTERING	CONSTANT PLS_INTEGER := 6 ;
  7  	 G_EXITING	CONSTANT PLS_INTEGER := 6 ;
  8  	 G_FINE 	CONSTANT PLS_INTEGER := 7 ;
  9  	 G_FINER	CONSTANT PLS_INTEGER := 8 ;
 10  	 G_FINEST	CONSTANT PLS_INTEGER := 9 ;
 11  	 G_NONE 	CONSTANT PLS_INTEGER := 10 ;
 12  
 13  
 14  	 function format_time(p_timestamp in timestamp)
 15  	 return varchar;
 16  
 17  	 function get_new_job_log_id
 18  	 return number;
 19  
 20  --%# Specify log destination
 21  
 22  	 procedure begin_log (
 23  	     logfile_name   in varchar,
 24  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 25  	     p_process_name in varchar default null,
 26  	     p_log_set	    in varchar default null,
 27  	     p_classname    in varchar default null,
 28  	     p_module_name  in varchar default null,
 29  	     p_status_msg   in varchar default null,
 30  	     p_thread_name  in varchar default null,
 31  	     p_log_level    in pls_integer default G_INFO,
 32  	     p_trace_level  in pls_integer default G_INFO);
 33  
 34  
 35  	FUNCTION begin_job (
 36  	     p_process_name in varchar,
 37  	     p_log_set	    in varchar default null,
 38  	     p_classname    in varchar default null,
 39  	     p_module_name  in varchar default null,
 40  	     p_status_msg   in varchar default null,
 41  	     p_thread_name  in varchar default null,
 42  	     logfile_name   in varchar default null,
 43  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 44  	     p_log_level    in pls_integer default G_INFO,
 45  	     p_trace_level  in pls_integer default G_INFO)
 46  	     return varchar;
 47  
 48  --%# Filter
 49  	 procedure set_caller_level(name in varchar ,
 50  				   level in pls_integer);
 51  --%# Log
 52  	 procedure log (
 53  	   p_log_msg	  in   varchar,
 54  	   p_log_level	  in   pls_integer default g_info,
 55  	   p_dump_stack   in   boolean default false
 56  	);
 57  --%# Finish job
 58  	 procedure end_job;
 59  
 60  	 procedure abort_job(exception_msg in varchar default null,
 61  		     stacktrace in varchar default null);
 62  
 63  --%# Finish job
 64  	 procedure set_action (p_action in	  varchar) ;
 65  
 66  	 procedure set_module (
 67  	     p_module_name in	     varchar,
 68  	     p_action_name in	varchar
 69  	 );
 70  
 71  	 function get_directory_path
 72  	 return varchar;
 73  
 74  --%# sql trace
 75  	 function get_tracefile(p_file_name in varchar)
 76  	 return clob;
 77  
 78  	 function get_my_tracefile_name
 79  	 return varchar;
 80  
 81  	 function set_tracefile_identifier(p_job_nbr in number)
 82  	 return varchar;
 83  
 84  	 function get_my_tracefile
 85  	 return clob ;
 86  
 87  
 88  --%# misc
 89  	 function basename (p_full_path in varchar,
 90  			    p_suffix	in varchar default null,
 91  			    p_separator in char default '/')
 92  	 return varchar;
 93  
 94  	 procedure prepare_connection;
 95  
 96  	 procedure trace_step(p_step_name in varchar, p_job_step_id in number);
 97  
 98  	function job_step_insert (
 99  	     p_step_name   in varchar,
100  	     p_step_info   in varchar default null,
101  	     p_classname   in varchar default null,
102  	     p_stacktrace  in varchar default null
103  	) return number;
104  
105  
106  	procedure job_step_finish (step_id in number);
107  
108  
109  
110  
111  	 procedure set_debug(debug boolean default true) ;
112  
113  END logger;
114  /

Package created.

SQL> show errors
No errors.
SQL> @ logger.pkb.sr.sql
SQL> --#<
SQL> set echo on
SQL> --spool pllog.pkb.lst
SQL> --#>
SQL> CREATE OR REPLACE PACKAGE BODY logger
  2  is
  3  	 g_debug		 boolean := false;
  4  	 g_job_msg_dir		 varchar (32) := 'JOB_MSG_DIR';
  5  	 --g_file_handle	   UTL_FILE.file_type;
  6  	 g_logfile_name 	 varchar(255);
  7  
  8  
  9  	type logger_dtl_type is table of logger_dtl%rowtype index by varchar(64);
 10  
 11  	 logger_dtls logger_dtl_type;
 12  
 13  	 g_job_log job_log%rowtype;
 14  
 15  	 function format_time(p_timestamp in timestamp)
 16  	 return varchar
 17  	 is
 18  	     my_timestamp varchar(256) :=  to_char (current_timestamp, 'YYYY-MM-DD HH24:MI:SSXFF');
 19  	 begin
 20  	     my_timestamp := replace(my_timestamp,' ','T');
 21  	     -- dbms_output.put_line('format_time ' || my_timestamp);
 22  	     return my_timestamp;
 23  	 end format_time;
 24  
 25  	function  logger_message_formatter  (
 26  	   job_log_id	 in   pls_integer,
 27  	   job_msg_id	 in   pls_integer,
 28  	   log_msg	 in   varchar,
 29  	   log_level	 in   pls_integer,
 30  	   caller_name	 in   varchar default null,
 31  	   line_number	 in   pls_integer default null,
 32  	   call_stack	 in   boolean default false,
 33  	   separator	 in   varchar default ','
 34  	) return varchar
 35  	is
 36  	    my_log_msg	varchar2(32767) := REPLACE (log_msg, '"', '""');
 37  	    my_log_entry varchar2(32767);
 38  	    my_timestamp varchar(256);
 39  	    stack varchar(32767);
 40  	    -- my_text_field_end_separator varchar)  := '",';
 41  	begin
 42  	   my_timestamp := format_timestamp(current_timestamp);
 43  
 44  	   if call_stack then
 45  	       stack := dbms_utility.format_call_stack;
 46  	   end if;
 47  	   --	   dbms_output.put_line('my_timestamp '||  my_timestamp);
 48  	   my_log_entry :=
 49  		log_level    || separator ||
 50  		'"' ||my_timestamp  || '"' || separator ||
 51  		'"' || my_log_msg   || '"' || separator ||
 52  		'"' || caller_name  || '"' || separator ||
 53  		line_number  || separator  ||
 54  		job_log_id   || separator ||
 55  		job_msg_id   || separator ||
 56  		'"' || stack || '"';
 57  	      -- dbms_output.put_line('log entry: ' || my_log_entry);
 58  	      return my_log_entry;
 59  	 end;
 60  
 61  	 function get_job_token
 62  	 return varchar
 63  	 is begin
 64  	     return format_time(current_timestamp);
 65  	 end;
 66  
 67  	 function get_new_job_log_id
 68  	 return number
 69  	 is begin
 70  	     return job_log_id_seq.nextval;
 71  	 end;
 72  
 73  	 --%#Tracing
 74  	 --%<
 75  	 procedure set_trace (p_trace_level in pls_integer)
 76  	 --%>
 77  	 is
 78  	 begin
 79  	    DBMS_TRACE.set_plsql_trace (p_trace_level);
 80  	 end set_trace;
 81  
 82  	 --%<
 83  	 function get_my_tracefile_name
 84  	 return varchar
 85  	 --%>
 86  	 is
 87  	      tracefile_name varchar(4096);
 88  	 begin
 89  	     select value into tracefile_name
 90  	     from v$diag_info
 91  	     where name = 'Default Trace File';
 92  
 93  	     return tracefile_name;
 94  	 end get_my_tracefile_name;
 95  
 96  	 --%<
 97  	 function set_tracefile_identifier(p_job_nbr in number)
 98  	 return varchar
 99  	 --%>
100  	 is
101  	    identifier varchar(32) := 'job_' || to_char(p_job_nbr);
102  	 begin
103  	     execute immediate 'alter session set tracefile_identifier = ''' || identifier || '''';
104  	     return get_my_tracefile_name;
105  	 end set_tracefile_identifier;
106  
107  	 --%# Job DML
108  	 --%# job_msg
109  
110  	 procedure job_msg_insert (
111  		    p_job_log_id in pls_integer,
112  	 --	      g_next_log_seq_nbr in pls_integer,
113  		    p_log_msg_id in varchar,
114  		    p_short_message in varchar,
115  		    p_log_level in pls_integer,
116  		    p_caller_name in varchar,
117  		    p_line_number in pls_integer,
118  		    p_long_message in varchar
119  	   )
120  	is
121  	    pragma autonomous_transaction ;
122  	begin
123  
124  	   if p_log_level = g_snap OR p_log_level <= g_job_log.msg_lvl then
125  	       insert into job_msg (
126  		    job_msg_id,    job_log_id,
127  		   -- log_seq_nbr,
128  		    log_msg_id,
129  		    log_msg,	   log_level,	      log_msg_ts,	   caller_name,
130  		    line_nbr,	   log_msg_clob
131  	       )
132  	       values(
133  		    p_log_msg_id,    p_job_log_id,
134  		    -- g_next_log_seq_nbr,
135  		    p_log_msg_id,
136  		    p_short_message, p_log_level,     current_timestamp,   p_caller_name,
137  		    p_line_number,   p_long_message
138  	      );
139  	   end if;
140  	end;
141  
142  	 --%# job_log
143  
144  	 procedure job_log_insert(rec in job_log%rowtype) is
145  	 begin
146  	    insert into job_log (
147  	       job_log_id,     process_name,	thread_name,
148  	       status_msg,     status_ts,	tracefile_name,
149  	       classname,      schema_name,	module_name,
150  	       job_token,      logfile_name
151  	  ) values (
152  	       rec.job_log_id,	rec.process_name,   rec.thread_name,
153  	       rec.status_msg,	current_timestamp,  rec.tracefile_name,
154  	       rec.classname,	rec.schema_name,  rec.module_name,
155  	       rec.job_token,	rec.logfile_name
156  	);
157  
158  	 end;
159  
160  	function job_step_insert (
161  	     p_step_name   in varchar,
162  	     p_step_info   in varchar default null,
163  	     p_classname   in varchar default null,
164  	     p_stacktrace  in varchar default null
165  	) return number
166  	is
167  	   my_job_step_id number;
168  	begin
169  	   insert into job_step (
170  	     job_step_id,   job_log_id, step_name, step_info,
171  	     classname,     start_ts,	stacktrace
172  	   ) values (
173  	     job_step_id_seq.nextval, g_job_log.job_log_id, p_step_name, p_step_info,
174  	     p_classname,   current_timestamp,	 p_stacktrace
175  	   ) returning job_step_id into my_job_step_id;
176  	   return my_job_step_id;
177  	end job_step_insert;
178  
179  	procedure job_step_finish (step_id in number) is
180  	 begin
181  	    update job_step
182  	    set end_ts = systimestamp
183  	    where job_step_id = step_id;
184  	 end job_step_finish;
185  
186  	procedure begin_log (
187  	     logfile_name   in varchar,
188  	     logfile_directory in varchar default 'JOB_MSG_DIR',
189  	     p_process_name in varchar default null,
190  	     p_log_set	    in varchar default null,
191  	     p_classname    in varchar default null,
192  	     p_module_name  in varchar default null,
193  	     p_status_msg   in varchar default null,
194  	     p_thread_name  in varchar default null,
195  	     p_log_level    in pls_integer default G_INFO,
196  	     p_trace_level  in pls_integer default G_INFO)
197  	 --%>
198  	 is
199  	     my_tracefile_name varchar(256);
200  	     my_job_token varchar(64) := format_time(current_timestamp);
201  
202  	 begin
203  	     dbms_output.put_line('begin_log() logfile_name "' || logfile_name || '"');
204  	     g_job_log.logfile_name := logfile_name;
205  	     g_job_log.directory_name := logfile_directory;
206  	     --g_job_log.job_log_id   := job_log_id_seq.nextval;
207  	     g_job_log.process_name := p_process_name;
208  	     g_job_log.classname    := p_classname;
209  	     g_job_log.module_name  := p_module_name;
210  	     g_job_log.status_msg   := p_status_msg;
211  	     g_job_log.thread_name  := p_thread_name;
212  	     g_job_log.job_token    := my_job_token;
213  	     g_job_log.logfile_name := logfile_name;
214  	     g_job_log.trace_level  := p_trace_level;
215  	     g_job_log.start_ts     := current_timestamp;
216  	     g_job_log.log_level    := p_log_level;
217  
218  	     set_trace(p_trace_level);
219  
220  	     my_tracefile_name := set_tracefile_identifier(g_job_log.job_log_id);
221  	     set_action('begin_job ' || to_char(g_job_log.job_log_id));
222  
223  
224  	 end begin_log;
225  
226  	 --%~~~<
227  	FUNCTION begin_job (
228  	     p_process_name in varchar,
229  	     p_log_set	    in varchar default null,
230  	     p_classname    in varchar default null,
231  	     p_module_name  in varchar default null,
232  	     p_status_msg   in varchar default null,
233  	     p_thread_name  in varchar default null,
234  	     logfile_name   in varchar default null,
235  	     logfile_directory in varchar default 'JOB_MSG_DIR',
236  	     p_log_level    in pls_integer default G_INFO,
237  	     p_trace_level  in pls_integer default G_INFO)
238  	     return varchar
239  	 --%>
240  	 is
241  	     my_tracefile_name varchar(256);
242  	     my_job_token varchar(64) := format_time(current_timestamp);
243  	     my_logfile_name varchar(64);
244  	 begin
245  	     dbms_output.put_line('begin_job logfile_name "' || logfile_name);
246  
247  	     g_job_log.job_log_id := job_log_id_seq.nextval;
248  
249  	     if logfile_name is not null then
250  		 my_logfile_name := logfile_name;
251  	     else
252  		 my_logfile_name := my_job_token || '-' || g_job_log.job_log_id  ||
253  				    '.log';
254  	     end if;
255  
256  	     begin_log (
257  		 logfile_name	=> my_logfile_name,
258  		 logfile_directory => logfile_directory,
259  		 p_process_name => p_process_name,
260  		 p_log_set	=> p_log_set,
261  		 p_classname	=> p_classname,
262  		 p_module_name	=> p_module_name,
263  		 p_status_msg	=> p_status_msg,
264  		 p_thread_name	=> p_thread_name,
265  		 p_log_level	=> p_log_level,
266  		 p_trace_level	=> p_trace_level
267  	     );
268  
269  	     set_action('begin_job ' || to_char(g_job_log.job_log_id));
270  	     job_log_insert ( g_job_log);
271  
272  	     return my_job_token;
273  	      end begin_job;
274  
275  
276  
277  	procedure end_job
278  	--::* update job_log.status_id to 'C' and status_msg to 'DONE'
279  	--::>
280  	is
281  	    PRAGMA AUTONOMOUS_TRANSACTION;
282  --       elapsed_tm   INTERVAL DAY TO SECOND;
283  	begin
284  	    set_action('end_job');
285   --      g_process_end_tm := current_timestamp;
286   --     elapsed_tm := g_process_end_tm - g_process_start_tm;
287  
288  	    update job_log
289  	    set
290  		   SID = NULL,
291  		   status_msg = 'DONE',
292  		   status_ts = SYSDATE
293  	     where job_log_id = g_job_log.job_log_id;
294  
295  	   commit;
296  	   set_action('end_job complete');
297  	end end_job;
298  
299  	 procedure abort_job(exception_msg in varchar default null,
300  		     stacktrace in varchar default null)
301  	 --::* procedure abort_job
302  	 --::* update job_log
303  	 --::* elapsed_time
304  	 --::* status_id = 'I'
305  	 --::* status_msg = 'ABORT'
306  	 --::>
307  	 is
308  	    PRAGMA AUTONOMOUS_TRANSACTION;
309  	    -- elapsed_tm   INTERVAL DAY TO SECOND;
310  	    stack   varchar (32767);
311  	 begin
312  	     set_action('abort_job');
313  	     -- g_process_end_tm := current_timestamp;
314  	     -- elapsed_tm := g_process_end_tm - g_process_start_tm;
315  
316  	     if stacktrace is not null then
317  		 stack := stacktrace;
318  	     else
319  		 stack := DBMS_UTILITY.format_call_stack ();
320  	     end if;
321  
322  	     update job_log
323  	     set  SID = NULL,
324  		  status_msg = 'ABORT',
325  		  status_ts = SYSDATE,
326  		  abort_stacktrace = stack
327  	     where job_log_id = g_job_log.job_log_id;
328  
329  	     COMMIT;
330  	     set_action('abort_job complete');
331  	 end abort_job;
332  
333  	 procedure set_debug(debug boolean default true)
334  	 is
335  	 begin
336  	     g_debug := debug;
337  	 end;
338  
339  
340  	 procedure set_action ( p_action in varchar ) is
341  	 begin
342  		 dbms_application_info.set_action(substr(p_action, 1, 64)) ;
343  	 end set_action ;
344  
345  	 procedure set_module ( p_module_name in varchar, p_action_name in varchar )
346  	 is
347  	 begin
348  		 dbms_application_info.set_module(p_module_name, p_action_name) ;
349  	 end set_module ;
350  
351  	function open_log_file (
352  	     directory_name in varchar,
353  	     p_file_name in varchar,
354  	     p_headers in boolean default true)
355  	return utl_file.file_type
356  	--
357  	--% opens a log file with the specified file name in the directory g_job_msg_dir
358  	is
359  	   my_directory_path varchar2(4000);
360  	   my_handle utl_file.file_type;
361  	begin
362  	   if (g_debug) then
363  	       dbms_output.put_line('open_log_file() dir: "' || directory_name ||
364  				'" file: "' || p_file_name || '"');
365  	   end if;
366  	   my_handle := utl_file.fopen(directory_name,p_file_name,'a');
367  	   return my_handle;
368  	end open_log_file;
369  
370  	function get_directory_path return varchar is
371  	    -- todo see if grants are wrong, permission must be granted to the user
372  	    cursor directory_cur is
373  	    select  owner, directory_name, directory_path
374  	    from    all_directories
375  	    where   directory_name = g_job_msg_dir;
376  
377  	    directory_rec directory_cur%rowtype;
378  
379  	 begin
380  	     open directory_cur;
381  	     fetch directory_cur into directory_rec;
382  	     dbms_output.put_line('owner: '	      || directory_rec.owner ||
383  				' directory_name: ' || directory_rec.directory_name ||
384  				' directory_path: ' || directory_rec.directory_path);
385  	    close directory_cur;
386  
387  	    return directory_rec.directory_path;
388  	 end get_directory_path;
389    --::<
390  	   function basename (p_full_path in varchar,
391  			  p_suffix    in varchar default null,
392  			  p_separator in char default '/')
393  	   return varchar
394  	   --:: like bash basename or gnu basename, returns the filename of a path optionally
395  	   --:: stripping the specified file extension
396  	   --::>
397  	 is
398  	    my_basename varchar(256);
399  	 begin
400  	     dbms_output.put_line('basename ' || p_full_path);
401  	     my_basename := substr(p_full_path, instr(p_full_path,p_separator,-1)+1);
402  	     dbms_output.put_line('my_basename' || my_basename);
403  	     if p_suffix is not null then
404  		 my_basename := substr(my_basename, 1, instr(my_basename, p_suffix, -1)-1);
405  	     end if;
406  
407  	    return my_basename;
408  	 end basename;
409  
410  	 function get_my_tracefile return clob is
411  	 begin
412  	     return get_tracefile(basename(get_my_tracefile_name));
413  	 end get_my_tracefile;
414  
415  	 function get_tracefile(p_file_name in varchar)
416  	 return clob is
417  	     my_clob	     clob;
418  	     my_bfile	     bfile;
419  	     my_dest_offset  integer := 1;
420  	     my_src_offset   integer := 1;
421  	     my_lang_context integer := dbms_lob.default_lang_ctx;
422  	     my_warning      integer;
423  	 begin
424  	     my_bfile := bfilename('UDUMP_DIR', p_file_name);
425  
426  	     dbms_lob.CreateTemporary(my_clob, FALSE, dbms_lob.CALL);
427  	     dbms_lob.FileOpen(my_bfile);
428  	     dbms_output.put_line('get_tracefile: before LoadClobFromFile');
429  
430  	     dbms_lob.LoadClobFromFile (
431  		 dest_lob     => my_clob,
432  		 src_bfile    => my_bfile,
433  		 amount       => dbms_lob.lobmaxsize,
434  		 dest_offset  => my_dest_offset,
435  		 src_offset   => my_src_offset,
436  		 bfile_csid   => dbms_lob.default_csid,
437  		 lang_context => my_lang_context,
438  		 warning      => my_warning
439  	     );
440  	     dbms_output.put_line('get_tracefile warning: ' || my_warning);
441  	     dbms_lob.FileClose(my_bfile);
442  
443  	     return my_clob;
444  	 end get_tracefile;
445  
446  	 procedure trace_step(p_step_name in varchar, p_job_step_id in number) is
447  	    job_step_id varchar(9) := to_char(p_job_step_id);
448  	    sql_text varchar(255) := 'select ''step_name: ''''' || p_step_name ||
449  		    ''''' job_log_id: ' || g_job_log.job_log_id ||
450  		   ' job_step_id: ' || p_job_step_id || ''' from dual';
451  	 begin
452  	    execute immediate sql_text;
453  	 end;
454  
455  	 procedure set_log_level (p_level in pls_integer) is
456  	 begin
457  	     if    p_level < 1 then g_job_log.log_level := 1;
458  	     elsif p_level > 9 then g_job_log.log_level := 9;
459  	     else  g_job_log.log_level := p_level;
460  	     end if;
461  	 end set_log_level;
462  
463  
464  	 PROCEDURE prepare_connection is
465  	     context_info DBMS_SESSION.AppCtxTabTyp;
466  	     info_count   PLS_INTEGER;
467  	     indx	  PLS_INTEGER;
468  	 BEGIN
469  	     DBMS_SESSION.LIST_CONTEXT ( context_info, info_count);
470  	     indx := context_info.FIRST;
471  	     LOOP
472  		EXIT WHEN indx IS NULL;
473  		DBMS_SESSION.CLEAR_CONTEXT(
474  		    context_info(indx).namespace,
475  		    context_info(indx).attribute,
476  		   null
477  		 );
478  		indx := context_info.NEXT (indx);
479  	    END LOOP;
480  	    DBMS_SESSION.RESET_PACKAGE;
481  	 END prepare_connection;
482  
483  	 procedure logger_dtls_to_str is
484  	     ndx varchar(64);
485  	     dtl logger_dtl%rowtype;
486  	     retval long := '';
487  	 begin
488  	     --  dbms_output.put_line('logger_dtls_to_str');
489  	    -- dbms_output.put_line('about to get first');
490  	    -- ndx := logger_dtls.first();
491  	     -- dbms_output.put_line('ndx "' || ndx || '"');
492  
493  	     while ndx is not null loop
494  		 dtl :=  logger_dtls(ndx);
495  		 retval := retval || dtl.logger_nm  || ' ' || dtl.log_lvl || '\n';
496  		 ndx := logger_dtls.next(ndx);
497  	     end loop;
498  	     /*
499  	     if (g_debug ) then
500  		 dbms_output.put_line('>> ' || retval);
501  	     end if;
502  	     */
503  	    -- dbms_output.put_line('end logger_dtls_to_str');
504  	 end logger_dtls_to_str;
505  
506   function get_log_level (p_logger_name in varchar)
507  	 return number
508  	 is
509  	     my_logger_name varchar(64) := upper(p_logger_name);
510  	     my_log_dtl logger_dtl%rowtype;
511  	     retval number;
512  	     was_not varchar(9) := ' was ';
513  	 begin
514  	      logger_dtls_to_str;
515  	      if (g_debug) then dbms_output.put_line('get_log_level() my_logger_name: "' || my_logger_name || '"'); end if;
516  	      begin
517  		  my_log_dtl  := logger_dtls(my_logger_name);
518  		  if (g_debug) then dbms_output.put_line('get_log_level() my_dtl_log: "' || my_logger_name || '"'); end if;
519  		  retval := my_log_dtl.log_lvl;
520  	      exception
521  		 when no_data_found then
522  		   if g_job_log.log_level is null then
523  		       retval := g_info;
524  		   else
525  		       retval := g_job_log.log_level;
526  		   end if;
527  		   was_not := 'was not';
528  	      end;
529  
530  	     if (g_debug) then
531  		 dbms_output.put_line('get_log_level() ' ||
532  		     ' logger: "'  || p_logger_name || '" ' ||
533  		     was_not || ' found '  ||
534  		     ' level: '   || to_char(my_log_dtl.log_lvl) ||
535  		     ' retval: ' || to_char(retval));
536  	     end if;
537  	     return retval;
538  
539  	 end get_log_level;
540  
541    --
542    --  Logger hdr and dtl
543    --
544  
545  	 procedure create_set (p_set_nm    in varchar,
546  			     p_default_level	 in number)
547  	 is
548  	 begin
549  	     insert into logger_hdr (logger_hdr_id, logger_set_nm, default_lvl)
550  	     values (logger_hdr_id_seq.nextval, upper(p_set_nm), p_default_level);
551  	  end create_set;
552  
553  	 procedure set_caller_level(name in varchar ,  level in pls_integer)
554  	 is
555  	     dtl  logger_dtl%rowtype;
556  	 begin
557  		 dtl.logger_nm := upper(name);
558  		 dtl.log_lvl := level;
559  		 logger_dtls(dtl.logger_nm) := dtl;
560  	 end;
561  
562  	 procedure define_logger_level(p_set_nm    in varchar,
563  			     p_logger_nm in varchar,
564  			     p_level	 in number)
565  	 is
566  	     logger_rec logger_hdr%rowtype;
567  	 begin
568  
569  		  insert into logger_dtl (logger_dtl_id, logger_hdr_id,
570  			  logger_nm, log_lvl)
571  		  select logger_dtl_id_seq.nextval,
572  			 logger_hdr.logger_hdr_id,
573  			 upper(p_logger_nm), p_level
574  		  from	 logger_hdr
575  		  where
576  			logger_set_nm = upper(p_set_nm);
577  
578  		  exception when dup_val_on_index
579  		  then
580  		      update logger_dtl
581  		      set  log_lvl =  p_level
582  		      where logger_hdr_id =  (
583  			      select logger_hdr_id
584  			      from   logger_hdr
585  			      where logger_set_nm = upper(p_set_nm)
586  			     )
587  			      and logger_nm = upper(p_logger_nm);
588  
589  
590  
591  	 end define_logger_level;
592  
593  
594  /*
595  	procedure log2(message in varchar,
596  		       level   in pls_integer default g_info)
597  	is
598  	   owner       varchar(64);
599  	   name        varchar(64);
600  	   line        number;
601  	   caller_type varchar(64);
602  	begin
603  	    OWA_UTIL.who_called_me (owner,name,line,caller_type);
604  	    --dbms_output.put_line('name: ' || name || ' line: ' || line);
605  	end log2;
606   */
607  
608    procedure log (
609  	   p_log_msg	  in   varchar,
610  	   p_log_level	  in   pls_integer default g_info,
611  	   p_dump_stack   in   boolean default false
612  	)
613  	is
614  	   my_message	varchar2 (32767);
615  	   owner       varchar(64);
616  	   name        varchar(64);
617  	   line        number;
618  	   caller_type varchar(64);
619  	   my_logger_level number;
620  	   my_file_handle utl_file.file_type;
621  	   skip varchar(6) := ' skip ';
622  	begin
623  	       OWA_UTIL.who_called_me (owner,name,line,caller_type);
624  	       if name is null then
625  		   name := 'anonymous';
626  	       end if;
627  	       my_logger_level := get_log_level(name);
628  
629  	   if (g_debug) and p_log_level > my_logger_level then
630  		 skip := '	';
631  		 dbms_output.put_line(
632  		   'log() ' ||	skip ||
633  		   'caller: ' || name ||
634  		   ' line: ' || line ||
635  		   ' my_logger_level: ' || to_char(my_logger_level) ||
636  		    ' p_log_level: '	 || to_char(p_log_level));
637  -- ||
638   --	 ' g_job_log.log_level: '     || to_char(g_job_log.log_level));
639  	   end if;
640  
641  	   if p_log_level <= my_logger_level then
642  	       my_message := logger_message_formatter  (
643  		   job_log_id	=> g_job_log.job_log_id,
644  		   job_msg_id	=> null,
645  		   log_msg	=> p_log_msg,
646  		   log_level	=> p_log_level,
647  		   caller_name	=> name,
648  		   line_number	=> line,
649  		   call_stack	=> null
650  	       );
651  	       if g_job_log.logfile_name is not null then
652  	       -- write to file
653  		   my_file_handle := open_log_file (g_job_log.directory_name,g_job_log.logfile_name);
654  		   UTL_FILE.put_line (my_file_handle, my_message);
655  		   utl_file.fclose(my_file_handle);
656  	       else
657  		   dbms_output.put_line (my_message);
658  	       end if;
659  	       --
660  	       if (g_debug) then
661  		  dbms_output.put_line('log(): ' || my_message);
662  	       end if;
663  	   end if;
664  	end log;
665  
666  
667  begin
668  	dbms_output.ENABLE(1000000) ;
669    -- set_context;
670  end logger;
671  /

Package body created.

SQL> 
SQL> /*
SQL> begin
SQL> 	   sys.DBMS_MONITOR.session_trace_enable(waits=>TRUE, binds=>FALSE);
SQL> end;
SQL> /
SQL> */
SQL> --#<
SQL> show errors
No errors.
SQL> --#>
SQL> 
SQL> --@ cursor_tables.sr.sql
SQL> exit
