SQL> --#>
SQL> CREATE OR REPLACE PACKAGE BODY pllog
  2  is
  3  	 g_debug		 boolean := true;
  4  	 g_job_msg_dir		 varchar (32) := 'JOB_MSG_DIR';
  5  	 --g_file_handle	   UTL_FILE.file_type;
  6  	 g_logfile_name 	 varchar(255);
  7  
  8  
  9  	type logger_dtl_type is table of logger_dtl%rowtype index by varchar(64);
 10  
 11  	  logger_dtls logger_dtl_type;
 12  
 13  	 g_job_log job_log%rowtype;
 14  
 15  
 16  	 function format_time(p_timestamp in timestamp)
 17  	 return varchar
 18  	 is
 19  	     my_timestamp varchar(256) :=  to_char (current_timestamp, 'YYYY-MM-DD HH24:MI:SSXFF');
 20  	 begin
 21  	     my_timestamp := replace(my_timestamp,' ','T');
 22  	     -- dbms_output.put_line('format_time ' || my_timestamp);
 23  	     return my_timestamp;
 24  	 end format_time;
 25  
 26  	 function get_job_token
 27  	 return varchar
 28  	 is begin
 29  	     return format_time(current_timestamp);
 30  	 end;
 31  
 32  	 function get_new_job_log_id
 33  	 return number
 34  	 is begin
 35  	     return job_log_id_seq.nextval;
 36  	 end;
 37  
 38  	 --%#Tracing
 39  	 --%<
 40  	 procedure set_trace (p_trace_level in pls_integer)
 41  	 --%>
 42  	 is
 43  	 begin
 44  	    DBMS_TRACE.set_plsql_trace (p_trace_level);
 45  	 end set_trace;
 46  
 47  	 --%<
 48  	 function get_my_tracefile_name
 49  	 return varchar
 50  	 --%>
 51  	 is
 52  	      tracefile_name varchar(4096);
 53  	 begin
 54  	     select value into tracefile_name
 55  	     from v$diag_info
 56  	     where name = 'Default Trace File';
 57  
 58  	     return tracefile_name;
 59  	 end get_my_tracefile_name;
 60  
 61  	 --%<
 62  	 function set_tracefile_identifier(p_job_nbr in number)
 63  	 return varchar
 64  	 --%>
 65  	 is
 66  	    identifier varchar(32) := 'job_' || to_char(p_job_nbr);
 67  	 begin
 68  	     execute immediate 'alter session set tracefile_identifier = ''' || identifier || '''';
 69  	     return get_my_tracefile_name;
 70  	 end set_tracefile_identifier;
 71  
 72  	 procedure job_msg_insert (
 73  		    p_job_log_id in pls_integer,
 74  	 --	      g_next_log_seq_nbr in pls_integer,
 75  		    p_log_msg_id in varchar,
 76  		    p_short_message in varchar,
 77  		    p_log_level in pls_integer,
 78  		    p_caller_name in varchar,
 79  		    p_line_number in pls_integer,
 80  		    p_long_message in varchar
 81  	   )
 82  	is
 83  	    pragma autonomous_transaction ;
 84  	begin
 85  
 86  	   if p_log_level = g_snap OR p_log_level <= g_job_log.msg_lvl then
 87  	       insert into job_msg (
 88  		    job_msg_id,    job_log_id,
 89  		   -- log_seq_nbr,
 90  		    log_msg_id,
 91  		    log_msg,	   log_level,	      log_msg_ts,	   caller_name,
 92  		    line_nbr,	   log_msg_clob
 93  	       )
 94  	       values(
 95  		    p_log_msg_id,    p_job_log_id,
 96  		    -- g_next_log_seq_nbr,
 97  		    p_log_msg_id,
 98  		    p_short_message, p_log_level,     current_timestamp,   p_caller_name,
 99  		    p_line_number,   p_long_message
100  	      );
101  	   end if;
102  	end;
103  
104  	 procedure job_log_insert(rec in job_log%rowtype) is
105  	 begin
106  	    insert into job_log (
107  	       job_log_id,     process_name,	thread_name,
108  	       status_msg,     status_ts,	tracefile_name,
109  	       classname,      schema_name,	module_name,
110  	       job_token,      logfile_name
111  	  ) values (
112  	       rec.job_log_id,	rec.process_name,   rec.thread_name,
113  	       rec.status_msg,	current_timestamp,  rec.tracefile_name,
114  	       rec.classname,	rec.schema_name,  rec.module_name,
115  	       rec.job_token,	rec.logfile_name
116  	);
117  
118  	 end;
119  
120  	procedure begin_log (
121  	     logfile_name   in varchar,
122  	     logfile_directory in varchar default 'JOB_MSG_DIR',
123  	     p_process_name in varchar default null,
124  	     p_log_set	    in varchar default null,
125  	     p_classname    in varchar default null,
126  	     p_module_name  in varchar default null,
127  	     p_status_msg   in varchar default null,
128  	     p_thread_name  in varchar default null,
129  	     p_log_level    in pls_integer default G_INFO,
130  	     p_trace_level  in pls_integer default G_INFO)
131  	 --%>
132  	 is
133  	     my_tracefile_name varchar(256);
134  	     my_job_token varchar(64) := format_time(current_timestamp);
135  
136  	 begin
137  	     dbms_output.put_line('begin_log() logfile_name "' || logfile_name || '"');
138  	     g_job_log.logfile_name := logfile_name;
139  	     g_job_log.directory_name := logfile_directory;
140  	     --g_job_log.job_log_id   := job_log_id_seq.nextval;
141  	     g_job_log.process_name := p_process_name;
142  	     g_job_log.classname    := p_classname;
143  	     g_job_log.module_name  := p_module_name;
144  	     g_job_log.status_msg   := p_status_msg;
145  	     g_job_log.thread_name  := p_thread_name;
146  	     g_job_log.job_token    := my_job_token;
147  	     g_job_log.logfile_name := logfile_name;
148  	     g_job_log.trace_level  := p_trace_level;
149  	     g_job_log.start_ts     := current_timestamp;
150  	     g_job_log.log_level    := p_log_level;
151  
152  	     set_trace(p_trace_level);
153  
154  	     my_tracefile_name := set_tracefile_identifier(g_job_log.job_log_id);
155  	     set_action('begin_job ' || to_char(g_job_log.job_log_id));
156  
157  
158  	 end begin_log;
159  
160  	 --%~~~<
161  	FUNCTION begin_job (
162  	     p_process_name in varchar,
163  	     p_log_set	    in varchar default null,
164  	     p_classname    in varchar default null,
165  	     p_module_name  in varchar default null,
166  	     p_status_msg   in varchar default null,
167  	     p_thread_name  in varchar default null,
168  	     logfile_name   in varchar default null,
169  	     logfile_directory in varchar default 'JOB_MSG_DIR',
170  	     p_log_level    in pls_integer default G_INFO,
171  	     p_trace_level  in pls_integer default G_INFO)
172  	     return varchar
173  	 --%>
174  	 is
175  	     my_tracefile_name varchar(256);
176  	     my_job_token varchar(64) := format_time(current_timestamp);
177  	     my_logfile_name varchar(64);
178  	 begin
179  	     dbms_output.put_line('begin_job logfile_name "' || logfile_name);
180  
181  	     g_job_log.job_log_id := job_log_id_seq.nextval;
182  
183  	     if logfile_name is not null then
184  		 my_logfile_name := logfile_name;
185  	     else
186  		 my_logfile_name := my_job_token || '-' || g_job_log.job_log_id  ||
187  				    '.log';
188  	     end if;
189  
190  	     begin_log (
191  		 logfile_name	=> my_logfile_name,
192  		 logfile_directory => logfile_directory,
193  		 p_process_name => p_process_name,
194  		 p_log_set	=> p_log_set,
195  		 p_classname	=> p_classname,
196  		 p_module_name	=> p_module_name,
197  		 p_status_msg	=> p_status_msg,
198  		 p_thread_name	=> p_thread_name,
199  		 p_log_level	=> p_log_level,
200  		 p_trace_level	=> p_trace_level
201  	     );
202  
203  	     set_action('begin_job ' || to_char(g_job_log.job_log_id));
204  	     job_log_insert ( g_job_log);
205  
206  	     return my_job_token;
207  	      end begin_job;
208  
209  
210  
211  	procedure end_job
212  	--::* update job_log.status_id to 'C' and status_msg to 'DONE'
213  	--::>
214  	is
215  	    PRAGMA AUTONOMOUS_TRANSACTION;
216  --       elapsed_tm   INTERVAL DAY TO SECOND;
217  	begin
218  	    set_action('end_job');
219   --      g_process_end_tm := current_timestamp;
220   --     elapsed_tm := g_process_end_tm - g_process_start_tm;
221  
222  	    update job_log
223  	    set
224  		   SID = NULL,
225  		   status_msg = 'DONE',
226  		   status_ts = SYSDATE
227  	     where job_log_id = g_job_log.job_log_id;
228  
229  	   commit;
230  	   set_action('end_job complete');
231  	end end_job;
232  
233  	 procedure abort_job(p_stacktrace in varchar default null)
234  	 --::* procedure abort_job
235  	 --::* update job_log
236  	 --::* elapsed_time
237  	 --::* status_id = 'I'
238  	 --::* status_msg = 'ABORT'
239  	 --::>
240  	 is
241  	    PRAGMA AUTONOMOUS_TRANSACTION;
242  	    -- elapsed_tm   INTERVAL DAY TO SECOND;
243  	    stack   varchar (32767);
244  	 begin
245  	     set_action('abort_job');
246  	     -- g_process_end_tm := current_timestamp;
247  	     -- elapsed_tm := g_process_end_tm - g_process_start_tm;
248  
249  	     if p_stacktrace is not null then
250  		 stack := p_stacktrace;
251  	     else
252  		 stack := DBMS_UTILITY.format_call_stack ();
253  	     end if;
254  
255  	     update job_log
256  	     set  SID = NULL,
257  		  status_msg = 'ABORT',
258  		  status_ts = SYSDATE,
259  		  abort_stacktrace = stack
260  	     where job_log_id = g_job_log.job_log_id;
261  
262  	     COMMIT;
263  	     set_action('abort_job complete');
264  	 end abort_job;
265  
266  
267  	 procedure set_action ( p_action in varchar ) is
268  	 begin
269  		 dbms_application_info.set_action(substr(p_action, 1, 64)) ;
270  	 end set_action ;
271  
272  	 procedure set_module ( p_module_name in varchar, p_action_name in varchar )
273  	 is
274  	 begin
275  		 dbms_application_info.set_module(p_module_name, p_action_name) ;
276  	 end set_module ;
277  
278  	function open_log_file (
279  	     directory_name in varchar,
280  	     p_file_name in varchar,
281  	     p_headers in boolean default true)
282  	return utl_file.file_type
283  	--
284  	--% opens a log file with the specified file name in the directory g_job_msg_dir
285  	is
286  	   my_directory_path varchar2(4000);
287  	   my_handle utl_file.file_type;
288  	begin
289  	   dbms_output.put_line('open_log_file() dir: "' || directory_name ||
290  				'" file: "' || p_file_name || '"');
291  	   --if (NOT UTL_FILE.is_open (g_file_handle)) then
292  		 my_handle := utl_file.fopen(directory_name,p_file_name,'a');
293  	   --end if;
294  	   return my_handle;
295  	end open_log_file;
296  
297  	function get_directory_path return varchar is
298  	    -- todo see if grants are wrong, permission must be granted to the user
299  	    cursor directory_cur is
300  	    select  owner, directory_name, directory_path
301  	    from    all_directories
302  	    where   directory_name = g_job_msg_dir;
303  
304  	    directory_rec directory_cur%rowtype;
305  
306  	 begin
307  	     open directory_cur;
308  	     fetch directory_cur into directory_rec;
309  	     dbms_output.put_line('owner: '	      || directory_rec.owner ||
310  				' directory_name: ' || directory_rec.directory_name ||
311  				' directory_path: ' || directory_rec.directory_path);
312  	    close directory_cur;
313  
314  	    return directory_rec.directory_path;
315  	 end get_directory_path;
316    --::<
317  	   function basename (p_full_path in varchar,
318  			  p_suffix    in varchar default null,
319  			  p_separator in char default '/')
320  	   return varchar
321  	   --:: like bash basename or gnu basename, returns the filename of a path optionally
322  	   --:: stripping the specified file extension
323  	   --::>
324  	 is
325  	    my_basename varchar(256);
326  	 begin
327  	     dbms_output.put_line('basename ' || p_full_path);
328  	     my_basename := substr(p_full_path, instr(p_full_path,p_separator,-1)+1);
329  	     dbms_output.put_line('my_basename' || my_basename);
330  	     if p_suffix is not null then
331  		 my_basename := substr(my_basename, 1, instr(my_basename, p_suffix, -1)-1);
332  	     end if;
333  
334  	    return my_basename;
335  	 end basename;
336  
337  	 function get_my_tracefile return clob is
338  	 begin
339  	     return get_tracefile(basename(get_my_tracefile_name));
340  	 end get_my_tracefile;
341  
342  	 function get_tracefile(p_file_name in varchar)
343  	 return clob is
344  	     my_clob	     clob;
345  	     my_bfile	     bfile;
346  	     my_dest_offset  integer := 1;
347  	     my_src_offset   integer := 1;
348  	     my_lang_context integer := dbms_lob.default_lang_ctx;
349  	     my_warning      integer;
350  	 begin
351  	     my_bfile := bfilename('UDUMP_DIR', p_file_name);
352  
353  	     dbms_lob.CreateTemporary(my_clob, FALSE, dbms_lob.CALL);
354  	     dbms_lob.FileOpen(my_bfile);
355  	     dbms_output.put_line('get_tracefile: before LoadClobFromFile');
356  
357  	     dbms_lob.LoadClobFromFile (
358  		 dest_lob     => my_clob,
359  		 src_bfile    => my_bfile,
360  		 amount       => dbms_lob.lobmaxsize,
361  		 dest_offset  => my_dest_offset,
362  		 src_offset   => my_src_offset,
363  		 bfile_csid   => dbms_lob.default_csid,
364  		 lang_context => my_lang_context,
365  		 warning      => my_warning
366  	     );
367  	     dbms_output.put_line('get_tracefile warning: ' || my_warning);
368  	     dbms_lob.FileClose(my_bfile);
369  
370  	     return my_clob;
371  	 end get_tracefile;
372  
373  	 procedure trace_step(p_step_name in varchar, p_job_step_id in number) is
374  	    job_step_id varchar(9) := to_char(p_job_step_id);
375  	    sql_text varchar(255) := 'select ''step_name: ''''' || p_step_name ||
376  		    ''''' job_log_id: ' || g_job_log.job_log_id ||
377  		   ' job_step_id: ' || p_job_step_id || ''' from dual';
378  	 begin
379  	    execute immediate sql_text;
380  	 end;
381  
382  	 procedure set_log_level (p_level in pls_integer) is
383  	 begin
384  	     if    p_level < 1 then g_job_log.log_level := 1;
385  	     elsif p_level > 9 then g_job_log.log_level := 9;
386  	     else  g_job_log.log_level := p_level;
387  	     end if;
388  	 end set_log_level;
389  
390  
391  	 PROCEDURE prepare_connection is
392  	     context_info DBMS_SESSION.AppCtxTabTyp;
393  	     info_count   PLS_INTEGER;
394  	     indx	  PLS_INTEGER;
395  	 BEGIN
396  	     DBMS_SESSION.LIST_CONTEXT ( context_info, info_count);
397  	     indx := context_info.FIRST;
398  	     LOOP
399  		EXIT WHEN indx IS NULL;
400  		DBMS_SESSION.CLEAR_CONTEXT(
401  		    context_info(indx).namespace,
402  		    context_info(indx).attribute,
403  		   null
404  		 );
405  		indx := context_info.NEXT (indx);
406  	    END LOOP;
407  	    DBMS_SESSION.RESET_PACKAGE;
408  	 END prepare_connection;
409  
410  	     procedure logger_dtls_to_str is
411  	     ndx varchar(64);
412  	     dtl logger_dtl%rowtype;
413  	     retval long := '';
414  	 begin
415  	     dbms_output.put_line('logger_dtls_to_str');
416  	    -- dbms_output.put_line('about to get first');
417  	    -- ndx := logger_dtls.first();
418  	     -- dbms_output.put_line('ndx "' || ndx || '"');
419  
420  	     while ndx is not null loop
421  		 dtl :=  logger_dtls(ndx);
422  		 retval := retval || dtl.logger_nm  || ' ' || dtl.log_lvl || '\n';
423  		 ndx := logger_dtls.next(ndx);
424  	     end loop;
425  	     dbms_output.put_line('>> ' || retval);
426  	    -- dbms_output.put_line('end logger_dtls_to_str');
427  	 end logger_dtls_to_str;
428  
429   function get_log_level (p_logger_name in varchar)
430  	 return number
431  	 is
432  	     my_logger_name varchar(64) := upper(p_logger_name);
433  	     my_log_dtl logger_dtl%rowtype;
434  	     retval number;
435  	 begin
436  	      dbms_output.put_line('get_log_level()  p_logger_name *' || p_logger_name || ' my_logger_name *' || my_logger_name || '*');
437  	      logger_dtls_to_str;
438  
439  	      begin
440  		  my_log_dtl  := logger_dtls(my_logger_name);
441  		  retval := my_log_dtl.log_lvl;
442  	      exception
443  		 when no_data_found then
444  		  dbms_output.put_line('logger not found ' || my_logger_name);
445  		  retval := g_job_log.log_level;
446  	      end;
447  
448  	     dbms_output.put_line('get_log_level() ====> ' || p_logger_name || ' ' || to_char(my_log_dtl.log_lvl) || ' retval ' || to_char(retval));
449  
450  	     return retval;
451  
452  	 end get_log_level;
453  
454    procedure log (
455  	   p_log_msg	  in   varchar,
456  	   p_log_level	  in   pls_integer default g_info,
457  	   p_caller_name  in   varchar default null,
458  	   p_line_number  in   pls_integer default null,
459  	   p_dump_stack   in   boolean default false
460  	)
461  	is
462  	   my_message	varchar2 (32767);
463  	   now		timestamp	 := SYSDATE;
464  	   --pragma autonomous_transaction ;
465    --
466  	   my_logger_level number;
467  	   my_file_handle utl_file.file_type;
468  
469  	begin
470  	    if p_caller_name is not null then  -- TODO make it work with null
471  		my_logger_level := get_log_level(p_caller_name);
472  	     else
473  		my_logger_level := g_job_log.log_level;
474  	    end if;
475  	    dbms_output.put_line(
476  	       'log() caller: ' || p_caller_name ||
477  	       ' line ' || p_line_number ||
478  	       ' my_logger_level ' || to_char(my_logger_level) ||
479  	       ' p_log_level '	   || to_char(p_log_level) ||
480  	       ' g_job_log.log_level '	   || to_char(g_job_log.log_level));
481  
482  
483  	   if p_log_level <= my_logger_level then
484  	       my_message := logger_message_formatter  (
485  		   job_log_id	=> g_job_log.job_log_id,
486  		   job_msg_id	=> null,
487  		   log_msg	=> p_log_msg,
488  		   log_level	=> p_log_level,
489  		   caller_name	=> p_caller_name,
490  		   line_number	=> p_line_number,
491  		   call_stack	=> null
492  	       );
493  	       dbms_output.put_line('log(): ' || to_char(p_log_level) || my_message);
494  	       my_file_handle := open_log_file (g_job_log.directory_name,g_job_log.logfile_name);
495  	       UTL_FILE.put_line (my_file_handle, my_message);
496  	       utl_file.fclose(my_file_handle);
497  
498  	   else
499  	       dbms_output.put_line(
500  		 'log() skip p_log_level ' || to_char(p_log_level) ||
501  		 ' my_logger_level ' || to_char(my_logger_level) ||
502  		 ' ' || my_message);
503  
504  	   end if;
505  
506  	   -- commit;
507  	end log;
508  
509  
510  begin
511  	dbms_output.ENABLE(1000000) ;
512    -- set_context;
513  end pllog;
514  /

Package body created.

SQL> 
SQL> /*
SQL> begin
SQL> 	   sys.DBMS_MONITOR.session_trace_enable(waits=>TRUE, binds=>FALSE);
SQL> end;
SQL> /
SQL> */
SQL> --#<
SQL> show errors
No errors.
SQL> exit
