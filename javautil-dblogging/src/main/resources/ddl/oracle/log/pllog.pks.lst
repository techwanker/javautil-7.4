SQL> create or replace PACKAGE pllog AS
  2  	 G_SEVERE	CONSTANT PLS_INTEGER := 1 ;
  3  	 G_WARNING	CONSTANT PLS_INTEGER := 2 ;
  4  	 G_INFO 	CONSTANT PLS_INTEGER := 4 ;
  5  	 G_SNAP 	CONSTANT PLS_INTEGER := 5 ;
  6  	 G_ENTERING	CONSTANT PLS_INTEGER := 6 ;
  7  	 G_EXITING	CONSTANT PLS_INTEGER := 6 ;
  8  	 G_FINE 	CONSTANT PLS_INTEGER := 7 ;
  9  	 G_FINER	CONSTANT PLS_INTEGER := 8 ;
 10  	 G_FINEST	CONSTANT PLS_INTEGER := 9 ;
 11  	 G_NONE 	CONSTANT PLS_INTEGER := 10 ;
 12  
 13  	 function format_time(p_timestamp in timestamp)
 14  	 return varchar;
 15  
 16  --    procedure set_logger_level (p_level in pls_integer);
 17  
 18  	 function get_new_job_log_id
 19  	 return number;
 20  
 21  
 22  	procedure begin_log (
 23  	     logfile_name   in varchar,
 24  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 25  	     p_process_name in varchar default null,
 26  	     p_log_set	    in varchar default null,
 27  	     p_classname    in varchar default null,
 28  	     p_module_name  in varchar default null,
 29  	     p_status_msg   in varchar default null,
 30  	     p_thread_name  in varchar default null,
 31  	     p_log_level    in pls_integer default G_INFO,
 32  	     p_trace_level  in pls_integer default G_INFO);
 33  
 34  
 35  	FUNCTION begin_job (
 36  	     p_process_name in varchar,
 37  	     p_log_set	    in varchar default null,
 38  	     p_classname    in varchar default null,
 39  	     p_module_name  in varchar default null,
 40  	     p_status_msg   in varchar default null,
 41  	     p_thread_name  in varchar default null,
 42  	     logfile_name   in varchar default null,
 43  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 44  	     p_log_level    in pls_integer default G_INFO,
 45  	     p_trace_level  in pls_integer default G_INFO)
 46  	     return varchar;
 47  
 48  	 procedure end_job;
 49  
 50  	 procedure abort_job(p_stacktrace in varchar default null);
 51  
 52  	 procedure set_action (p_action in	  varchar) ;
 53  
 54  	 procedure set_module (
 55  	     p_module_name in	     varchar,
 56  	     p_action_name in	varchar
 57  	 );
 58  
 59  	 function get_my_tracefile
 60  	 return clob ;
 61  
 62  	 function get_directory_path
 63  	 return varchar;
 64  
 65  	 function get_tracefile(p_file_name in varchar)
 66  	 return clob;
 67  
 68  	 function get_my_tracefile_name
 69  	 return varchar;
 70  
 71  	 function basename (p_full_path in varchar,
 72  			    p_suffix	in varchar default null,
 73  			    p_separator in char default '/')
 74  	 return varchar;
 75  
 76  	 procedure prepare_connection;
 77  
 78  	 procedure trace_step(p_step_name in varchar, p_job_step_id in number);
 79  
 80  	 function set_tracefile_identifier(p_job_nbr in number)
 81  	 return varchar;
 82  
 83    procedure log (
 84  	   -- TOD no database updates, no commit or autonomous required
 85  
 86  	   p_log_msg	  in   varchar,
 87  	   p_log_level	  in   pls_integer default g_info,
 88  	   p_caller_name  in   varchar default null,
 89  	   p_line_number  in   pls_integer default null,
 90  	   p_dump_stack   in   boolean default false
 91  	);
 92  
 93    procedure log2 (
 94  	   message     in   varchar,
 95  	   level       in   pls_integer default g_info
 96  	);
 97  
 98  /*
 99    procedure log (
100  	   p_log_msg	  in   varchar,
101  	   p_log_level	  in   pls_integer default g_info,
102  	   p_job_log_id   in   pls_integer default null,
103  	   p_job_msg_id   in   pls_integer default null,
104  	   p_elapsed_time in   INTERVAL DAY TO SECOND DEFAULT NULL, -- TODO not recorded at this time
105  	   p_caller_name  in   varchar default null,
106  	   p_line_number  in   pls_integer default null,
107  	   p_dump_stack   in   boolean default false
108  	);
109  */
110  
111  END pllog ;
112  /

Package created.

SQL> show errors
No errors.
SQL> exit
