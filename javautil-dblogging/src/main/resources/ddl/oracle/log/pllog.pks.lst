SQL> create or replace PACKAGE pllog AS
  2  	 G_SEVERE	CONSTANT PLS_INTEGER := 1 ;
  3  	 G_WARNING	CONSTANT PLS_INTEGER := 2 ;
  4  	 G_INFO 	CONSTANT PLS_INTEGER := 4 ;
  5  	 G_SNAP 	CONSTANT PLS_INTEGER := 5 ;
  6  	 G_ENTERING	CONSTANT PLS_INTEGER := 6 ;
  7  	 G_EXITING	CONSTANT PLS_INTEGER := 6 ;
  8  	 G_FINE 	CONSTANT PLS_INTEGER := 7 ;
  9  	 G_FINER	CONSTANT PLS_INTEGER := 8 ;
 10  	 G_FINEST	CONSTANT PLS_INTEGER := 9 ;
 11  	 G_NONE 	CONSTANT PLS_INTEGER := 10 ;
 12  
 13  
 14  	 function format_time(p_timestamp in timestamp)
 15  	 return varchar;
 16  
 17  	 function get_new_job_log_id
 18  	 return number;
 19  
 20  --%# Specify log destination
 21  
 22  	 procedure begin_log (
 23  	     logfile_name   in varchar,
 24  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 25  	     p_process_name in varchar default null,
 26  	     p_log_set	    in varchar default null,
 27  	     p_classname    in varchar default null,
 28  	     p_module_name  in varchar default null,
 29  	     p_status_msg   in varchar default null,
 30  	     p_thread_name  in varchar default null,
 31  	     p_log_level    in pls_integer default G_INFO,
 32  	     p_trace_level  in pls_integer default G_INFO);
 33  
 34  
 35  	FUNCTION begin_job (
 36  	     p_process_name in varchar,
 37  	     p_log_set	    in varchar default null,
 38  	     p_classname    in varchar default null,
 39  	     p_module_name  in varchar default null,
 40  	     p_status_msg   in varchar default null,
 41  	     p_thread_name  in varchar default null,
 42  	     logfile_name   in varchar default null,
 43  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 44  	     p_log_level    in pls_integer default G_INFO,
 45  	     p_trace_level  in pls_integer default G_INFO)
 46  	     return varchar;
 47  
 48  --%# Filter
 49  	 procedure set_caller_level(name in varchar ,
 50  				   level in pls_integer);
 51  --%# Log
 52  	 procedure log (
 53  	   p_log_msg	  in   varchar,
 54  	   p_log_level	  in   pls_integer default g_info,
 55  	   p_dump_stack   in   boolean default false
 56  	);
 57  --%# Finish job
 58  	 procedure end_job;
 59  
 60  	 procedure abort_job(p_stacktrace in varchar default null);
 61  
 62  --%# Finish job
 63  	 procedure set_action (p_action in	  varchar) ;
 64  
 65  	 procedure set_module (
 66  	     p_module_name in	     varchar,
 67  	     p_action_name in	varchar
 68  	 );
 69  
 70  	 function get_directory_path
 71  	 return varchar;
 72  
 73  --%# sql trace
 74  	 function get_tracefile(p_file_name in varchar)
 75  	 return clob;
 76  
 77  	 function get_my_tracefile_name
 78  	 return varchar;
 79  
 80  	 function set_tracefile_identifier(p_job_nbr in number)
 81  	 return varchar;
 82  
 83  	 function get_my_tracefile
 84  	 return clob ;
 85  
 86  
 87  --%# misc
 88  	 function basename (p_full_path in varchar,
 89  			    p_suffix	in varchar default null,
 90  			    p_separator in char default '/')
 91  	 return varchar;
 92  
 93  	 procedure prepare_connection;
 94  
 95  	 procedure trace_step(p_step_name in varchar, p_job_step_id in number);
 96  
 97  	function job_step_insert (
 98  	     p_step_name   in varchar,
 99  	     p_step_info   in varchar,
100  	     p_classname   in varchar,
101  	     p_stacktrace  in varchar
102  	) return number;
103  
104  
105  	procedure job_step_finish (step_id in number);
106  
107  
108  
109  
110  	 procedure set_debug(debug boolean default true) ;
111  
112  END pllog ;
113  /

Package created.

SQL> show errors
No errors.
SQL> exit
