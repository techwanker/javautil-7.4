SQL> create or replace PACKAGE pllog AS
  2  	 G_SEVERE	CONSTANT PLS_INTEGER := 1 ;
  3  	 G_WARNING	CONSTANT PLS_INTEGER := 2 ;
  4  	 G_INFO 	CONSTANT PLS_INTEGER := 4 ;
  5  	 G_SNAP 	CONSTANT PLS_INTEGER := 5 ;
  6  	 G_ENTERING	CONSTANT PLS_INTEGER := 6 ;
  7  	 G_EXITING	CONSTANT PLS_INTEGER := 6 ;
  8  	 G_FINE 	CONSTANT PLS_INTEGER := 7 ;
  9  	 G_FINER	CONSTANT PLS_INTEGER := 8 ;
 10  	 G_FINEST	CONSTANT PLS_INTEGER := 9 ;
 11  	 G_NONE 	CONSTANT PLS_INTEGER := 10 ;
 12  
 13  	 function format_time(p_timestamp in timestamp)
 14  	 return varchar;
 15  
 16  --    procedure set_logger_level (p_level in pls_integer);
 17  
 18  	 function get_new_job_log_id
 19  	 return number;
 20  
 21  
 22  	procedure begin_log (
 23  	     logfile_name   in varchar,
 24  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 25  	     p_process_name in varchar default null,
 26  	     p_log_set	    in varchar default null,
 27  	     p_classname    in varchar default null,
 28  	     p_module_name  in varchar default null,
 29  	     p_status_msg   in varchar default null,
 30  	     p_thread_name  in varchar default null,
 31  	     p_log_level    in pls_integer default G_INFO,
 32  	     p_trace_level  in pls_integer default G_INFO);
 33  
 34  
 35  	 function begin_job (
 36  	     p_process_name in varchar,
 37  	     p_log_set	 in varchar default null,
 38  	     p_classname    in varchar default null,
 39  	     p_module_name  in varchar default null,
 40  	     p_status_msg   in varchar default null,
 41  	     p_thread_name  in varchar default null,
 42  	     logfile_name   in varchar default null,
 43  	     p_log_level in pls_integer default G_INFO,
 44  	     p_trace_level  in pls_integer default G_INFO)
 45  	 return varchar;
 46  
 47  	 procedure end_job;
 48  
 49  	 procedure abort_job(p_stacktrace in varchar default null);
 50  
 51  	 procedure set_action (p_action in	  varchar) ;
 52  
 53  	 procedure set_module (
 54  	     p_module_name in	     varchar,
 55  	     p_action_name in	varchar
 56  	 );
 57  
 58  	 function get_my_tracefile
 59  	 return clob ;
 60  
 61  	 function get_directory_path
 62  	 return varchar;
 63  
 64  	 function get_tracefile(p_file_name in varchar)
 65  	 return clob;
 66  
 67  	 function get_my_tracefile_name
 68  	 return varchar;
 69  
 70  	 function basename (p_full_path in varchar,
 71  			    p_suffix	in varchar default null,
 72  			    p_separator in char default '/')
 73  	 return varchar;
 74  
 75  	 procedure prepare_connection;
 76  
 77  	 procedure trace_step(p_step_name in varchar, p_job_step_id in number);
 78  
 79  	 function set_tracefile_identifier(p_job_nbr in number)
 80  	 return varchar;
 81  
 82  
 83    procedure log (
 84  	   p_log_msg	  in   varchar,
 85  	   p_log_level	  in   pls_integer default g_info,
 86  	   p_job_log_id   in   pls_integer default null,
 87  	   p_job_msg_id   in   pls_integer default null,
 88  	   p_elapsed_time in   INTERVAL DAY TO SECOND DEFAULT NULL, -- TODO not recorded at this time
 89  	   p_caller_name  in   varchar default null,
 90  	   p_line_number  in   pls_integer default null,
 91  	   p_dump_stack   in   boolean default false
 92  	);
 93  
 94  END pllog ;
 95  /

Package created.

SQL> show errors
No errors.
SQL> exit
