SQL> create or replace PACKAGE pllog AS
  2  	 G_SEVERE	CONSTANT PLS_INTEGER := 1 ;
  3  	 G_WARNING	CONSTANT PLS_INTEGER := 2 ;
  4  	 G_INFO 	CONSTANT PLS_INTEGER := 4 ;
  5  	 G_SNAP 	CONSTANT PLS_INTEGER := 5 ;
  6  	 G_ENTERING	CONSTANT PLS_INTEGER := 6 ;
  7  	 G_EXITING	CONSTANT PLS_INTEGER := 6 ;
  8  	 G_FINE 	CONSTANT PLS_INTEGER := 7 ;
  9  	 G_FINER	CONSTANT PLS_INTEGER := 8 ;
 10  	 G_FINEST	CONSTANT PLS_INTEGER := 9 ;
 11  	 G_NONE 	CONSTANT PLS_INTEGER := 10 ;
 12  
 13  	 function format_time(p_timestamp in timestamp)
 14  	 return varchar;
 15  
 16  	 function get_new_job_log_id
 17  	 return number;
 18  
 19  	 procedure begin_log (
 20  	     logfile_name   in varchar,
 21  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 22  	     p_process_name in varchar default null,
 23  	     p_log_set	    in varchar default null,
 24  	     p_classname    in varchar default null,
 25  	     p_module_name  in varchar default null,
 26  	     p_status_msg   in varchar default null,
 27  	     p_thread_name  in varchar default null,
 28  	     p_log_level    in pls_integer default G_INFO,
 29  	     p_trace_level  in pls_integer default G_INFO);
 30  
 31  
 32  	FUNCTION begin_job (
 33  	     p_process_name in varchar,
 34  	     p_log_set	    in varchar default null,
 35  	     p_classname    in varchar default null,
 36  	     p_module_name  in varchar default null,
 37  	     p_status_msg   in varchar default null,
 38  	     p_thread_name  in varchar default null,
 39  	     logfile_name   in varchar default null,
 40  	     logfile_directory in varchar default 'JOB_MSG_DIR',
 41  	     p_log_level    in pls_integer default G_INFO,
 42  	     p_trace_level  in pls_integer default G_INFO)
 43  	     return varchar;
 44  
 45  	 procedure end_job;
 46  
 47  	 procedure abort_job(p_stacktrace in varchar default null);
 48  
 49  	 procedure set_action (p_action in	  varchar) ;
 50  
 51  	 procedure set_module (
 52  	     p_module_name in	     varchar,
 53  	     p_action_name in	varchar
 54  	 );
 55  
 56  	 function get_my_tracefile
 57  	 return clob ;
 58  
 59  	 function get_directory_path
 60  	 return varchar;
 61  
 62  	 function get_tracefile(p_file_name in varchar)
 63  	 return clob;
 64  
 65  	 function get_my_tracefile_name
 66  	 return varchar;
 67  
 68  	 function basename (p_full_path in varchar,
 69  			    p_suffix	in varchar default null,
 70  			    p_separator in char default '/')
 71  	 return varchar;
 72  
 73  	 procedure prepare_connection;
 74  
 75  	 procedure trace_step(p_step_name in varchar, p_job_step_id in number);
 76  
 77  	 function set_tracefile_identifier(p_job_nbr in number)
 78  	 return varchar;
 79  
 80  	 procedure log (
 81  	   p_log_msg	  in   varchar,
 82  	   p_log_level	  in   pls_integer default g_info,
 83  	   p_dump_stack   in   boolean default false
 84  	);
 85  
 86  
 87  	 procedure set_debug(debug boolean default true) ;
 88  
 89  	 procedure set_caller_level(name in varchar ,  level in pls_integer);
 90  /*
 91    procedure log (
 92  	   p_log_msg	  in   varchar,
 93  	   p_log_level	  in   pls_integer default g_info,
 94  	   p_job_log_id   in   pls_integer default null,
 95  	   p_job_msg_id   in   pls_integer default null,
 96  	   p_elapsed_time in   INTERVAL DAY TO SECOND DEFAULT NULL, -- TODO not recorded at this time
 97  	   p_caller_name  in   varchar default null,
 98  	   p_line_number  in   pls_integer default null,
 99  	   p_dump_stack   in   boolean default false
100  	);
101  */
102  
103  END pllog ;
104  /

Package created.

SQL> show errors
No errors.
SQL> exit
